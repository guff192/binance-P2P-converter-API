# auto-generated by GPT3.5

from typing import List, Optional, TypeAlias
from pydantic import BaseModel

from telebot.types import Update as TelebotUpdate


class User(BaseModel):
    id: int
    is_bot: bool
    first_name: str
    last_name: Optional[str] = None
    username: Optional[str] = None
    language_code: Optional[str] = None


class Chat(BaseModel):
    id: int
    type: str
    title: Optional[str] = None
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    all_members_are_administrators: Optional[bool] = None
    photo: Optional[dict] = None
    description: Optional[str] = None
    invite_link: Optional[str] = None
    pinned_message: Optional[dict] = None
    sticker_set_name: Optional[str] = None
    can_set_sticker_set: Optional[bool] = None


class Message(BaseModel):
    message_id: int
    date: int
    chat: Chat
    from_user: Optional[User] = None
    forward_from: Optional[User] = None
    forward_from_chat: Optional[Chat] = None
    forward_from_message_id: Optional[int] = None
    forward_signature: Optional[str] = None
    forward_sender_name: Optional[str] = None
    forward_date: Optional[int] = None
    reply_to_message: Optional["Message"] = None
    edit_date: Optional[int] = None
    media_group_id: Optional[str] = None
    author_signature: Optional[str] = None
    text: Optional[str] = None
    entities: Optional[List[dict]] = None
    caption_entities: Optional[List[dict]] = None
    audio: Optional[dict] = None
    document: Optional[dict] = None
    animation: Optional[dict] = None
    game: Optional[dict] = None
    photo: Optional[List[dict]] = None
    sticker: Optional[dict] = None
    video: Optional[dict] = None
    voice: Optional[dict] = None
    video_note: Optional[dict] = None
    caption: Optional[str] = None
    contact: Optional[dict] = None
    location: Optional[dict] = None
    venue: Optional[dict] = None
    poll: Optional[dict] = None
    dice: Optional[dict] = None
    new_chat_members: Optional[List[User]] = None
    left_chat_member: Optional[User] = None
    new_chat_title: Optional[str] = None
    new_chat_photo: Optional[List[dict]] = None
    delete_chat_photo: Optional[bool] = None
    group_chat_created: Optional[bool] = None
    supergroup_chat_created: Optional[bool] = None
    channel_chat_created: Optional[bool] = None
    migrate_to_chat_id: Optional[int] = None
    migrate_from_chat_id: Optional[int] = None
    pinned_message: Optional["Message"] = None
    invoice: Optional[dict] = None
    successful_payment: Optional[dict] = None
    connected_website: Optional[str] = None
    passport_data: Optional[dict] = None
    reply_markup: Optional[dict] = None


class Update(BaseModel):
    update_id: int
    message: Optional[Message] = None
    edited_message: Optional[Message] = None
    channel_post: Optional[Message] = None
    edited_channel_post: Optional[Message] = None
    inline_query: Optional[dict] = None
    chosen_inline_result: Optional[dict] = None
    callback_query: Optional[dict] = None
    shipping_query: Optional[dict] = None
    pre_checkout_query: Optional[dict] = None
    poll: Optional[dict] = None
    poll_answer: Optional[dict] = None
    my_chat_member: Optional[dict] = None
    chat_member: Optional[dict] = None
    chat_join_request: Optional[dict] = None

    async def to_telebot_update(self) -> TelebotUpdate: 
        return TelebotUpdate(
            update_id=self.update_id,
            message=self.message,
            edited_message=self.edited_message,
            channel_post=self.channel_post,
            edited_channel_post=self.edited_channel_post,
            inline_query=self.inline_query,
            chosen_inline_result=self.chosen_inline_result,
            callback_query=self.callback_query,
            shipping_query=self.shipping_query,
            pre_checkout_query=self.pre_checkout_query,
            poll=self.poll,
            poll_answer=self.poll_answer,
            my_chat_member=self.my_chat_member,
            chat_member=self.chat_member,
            chat_join_request=self.chat_join_request
        )


TelegramWebhookRequest: TypeAlias = Update

